*, ::before, ::after {
    margin-top: 0;
    margin-right: 0;
    margin: 0;
    box-sizing: border-box;
    color: unset;//stops hyperlink appearing purple
}

h1, h2, h3, h4 {
    font-weight: initial;
}

h1, h2 {
    font-size: 1.5em;
}

h3 {
    font-size: 1.17em;
}

h4 {
    margin: 1.33em 0;
}

p {
    --p-margin: 1em;
    margin-bottom: var(--p-margin);
    text-align: center;
}

@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@600;700;800&display=swap');

html {
    font-family: 'Nunito', sans-serif;
    // font-size: 18px;
    --dark-blue: #001e50;
    --dark-blue-purple: #201b65;
    --light-blue: #00B1EB;
    --grey: #6a767d;
    --dark-grey: #3b4145;
    --header-height: clamp(75px, 0.125 * var(--vh100), 5rem);
    --vw-suitable-for-small-menu: 700px;
    --hamburger-button-height: calc(1.5 * 1rem);
    --menu-button-CA-dimensions: 5em;
    --menu-button-horizontal-margin: 0.5em;
    --hf-border: solid var(--dark-blue) 2px;
    --footer-height: 200px;//🧙‍♂️more 'flexible' to have calculated it with JS? 
    --arbitrarily-large-number: 1000000px;
}

$vw-suitable-for-small-menu: 700px;

img {
    object-fit: contain;
    width: 100%;
    height: 100%;
    min-width: 0;
    min-height: 0;
}

@mixin grid-container-template($column-value: 1fr, $row-value: 1fr) {
    display: grid;
    grid-template-columns: $column-value;
    grid-template-rows: $row-value;
}

@mixin grid-container-horizontally-and-vertically-center-GIs($column-value: 1fr, $row-value: 1fr) {
  @include grid-container-template($column-value, $row-value);
  place-items: center;
}

header {
    // box-sizing: content-box;
    height: var(--header-height);
    @include grid-container-template(40% 20% 40%, 1fr);
    &::before {
        content: '';
    }
    > img {
        height: 100%;//var(--header-height);
    }
    > nav {
        @include grid-container-horizontally-and-vertically-center-GIs(repeat(3, auto), 1fr); 
        justify-content: space-evenly;
        // h4 {
        //     @include grid-container-horizontally-and-vertically-center-GIs(auto, auto);
        // }
    }
    @media screen and (max-width: $vw-suitable-for-small-menu) { //any way to have original CSS (`nav`) so that it positions 'menu' correctly?🧙‍♂️
        > nav {
            @include grid-container-horizontally-and-vertically-center-GIs(auto, 1fr);
            justify-content: end;
        }
    }
    border-bottom: var(--hf-border);
    #menu-button {
        margin: 0 var(--menu-button-horizontal-margin);
        height: var(--hamburger-button-height);
        width: var(--menu-button-CA-dimensions);
    }
}

#small-menu-options {
    height: var(--vh100);
    @include grid-container-horizontally-and-vertically-center-GIs(auto, 30% repeat(3, 1fr) 30%);
    > * {
        height: var(--header-height);//🧙‍♂️①min-height: var(--header-height-min); (something weird about setting a min-height on a GI?)
        @include grid-container-horizontally-and-vertically-center-GIs(auto, auto);
    }
    > *:first-child {
        justify-self: end;
        align-self: start;
        #exit-image {
            margin: 0 var(--menu-button-horizontal-margin);
            height: var(--hamburger-button-height);
            width: var(--menu-button-CA-dimensions);
        }
    }
}

main { //if accounting for extremely wide-screens, `main` could have a max-width
    min-height: calc(var(--vh100) - var(--header-height) - var(--footer-height));
    // width: 100%;
    #picture-text-container {
        --percentage-of-image: 55%;//(a value copied from original website)//var(--vw-suitable-for-small-menu);
        // border-bottom: var(--hf-border);
        display: flex;
        // height: calc(var(--vh100) * 0.618);
        width: 100vw;
        flex-wrap: wrap;
        // justify-content: space-around;
        align-items: center;
        > * {
            flex-grow: 1;
        }
        > img {
            object-fit: contain;
            width: var(--percentage-of-image);
            background-color: var(--dark-blue);
        }
        > div {
            width: clamp(30ch, 45%, var(--arbitrarily-large-number));//why does `max(30ch, 45%) not work`
            // flex-basis: 30ch;//a charatcer unit measurement;//calc(100% - var(--percentage-of-image)); 
            // margin: 0 auto;
            @include grid-container-horizontally-and-vertically-center-GIs(auto, auto auto); align-content: center;
            p {
                max-width: 65ch;
                margin-left: var(--p-margin);
                margin-right: var(--p-margin);
            }
            p:first-child {
                margin-top: var(--p-margin);
            }
        }
    }
}

footer {
    min-height: var(--footer-height);
    @include grid-container-horizontally-and-vertically-center-GIs(repeat(3, auto), auto);
    justify-content: space-evenly;
    align-items: start;
    >* {
        text-align: center;
        > h4 {
            font-weight: 800;
        }
        p {
            font-size: 14px;
            color: var(--dark-blue-purple);
        }
    }
    border-top: var(--hf-border);
}